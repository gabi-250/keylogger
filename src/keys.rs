use std::io;

const KEY_RESERVED: u16 = 0;
const KEY_ESC: u16 = 1;
const KEY_1: u16 = 2;
const KEY_2: u16 = 3;
const KEY_3: u16 = 4;
const KEY_4: u16 = 5;
const KEY_5: u16 = 6;
const KEY_6: u16 = 7;
const KEY_7: u16 = 8;
const KEY_8: u16 = 9;
const KEY_9: u16 = 10;
const KEY_0: u16 = 11;
const KEY_MINUS: u16 = 12;
const KEY_EQUAL: u16 = 13;
const KEY_BACKSPACE: u16 = 14;
const KEY_TAB: u16 = 15;
const KEY_Q: u16 = 16;
const KEY_W: u16 = 17;
const KEY_E: u16 = 18;
const KEY_R: u16 = 19;
const KEY_T: u16 = 20;
const KEY_Y: u16 = 21;
const KEY_U: u16 = 22;
const KEY_I: u16 = 23;
const KEY_O: u16 = 24;
const KEY_P: u16 = 25;
const KEY_LEFTBRACE: u16 = 26;
const KEY_RIGHTBRACE: u16 = 27;
const KEY_ENTER: u16 = 28;
const KEY_LEFTCTRL: u16 = 29;
const KEY_A: u16 = 30;
const KEY_S: u16 = 31;
const KEY_D: u16 = 32;
const KEY_F: u16 = 33;
const KEY_G: u16 = 34;
const KEY_H: u16 = 35;
const KEY_J: u16 = 36;
const KEY_K: u16 = 37;
const KEY_L: u16 = 38;
const KEY_SEMICOLON: u16 = 39;
const KEY_APOSTROPHE: u16 = 40;
const KEY_GRAVE: u16 = 41;
const KEY_LEFTSHIFT: u16 = 42;
const KEY_BACKSLASH: u16 = 43;
const KEY_Z: u16 = 44;
const KEY_X: u16 = 45;
const KEY_C: u16 = 46;
const KEY_V: u16 = 47;
const KEY_B: u16 = 48;
const KEY_N: u16 = 49;
const KEY_M: u16 = 50;
const KEY_COMMA: u16 = 51;
const KEY_DOT: u16 = 52;
const KEY_SLASH: u16 = 53;
const KEY_RIGHTSHIFT: u16 = 54;
const KEY_KPASTERISK: u16 = 55;
const KEY_LEFTALT: u16 = 56;
const KEY_SPACE: u16 = 57;
const KEY_CAPSLOCK: u16 = 58;
const KEY_F1: u16 = 59;
const KEY_F2: u16 = 60;
const KEY_F3: u16 = 61;
const KEY_F4: u16 = 62;
const KEY_F5: u16 = 63;
const KEY_F6: u16 = 64;
const KEY_F7: u16 = 65;
const KEY_F8: u16 = 66;
const KEY_F9: u16 = 67;
const KEY_F10: u16 = 68;
const KEY_NUMLOCK: u16 = 69;
const KEY_SCROLLLOCK: u16 = 70;
const KEY_KP7: u16 = 71;
const KEY_KP8: u16 = 72;
const KEY_KP9: u16 = 73;
const KEY_KPMINUS: u16 = 74;
const KEY_KP4: u16 = 75;
const KEY_KP5: u16 = 76;
const KEY_KP6: u16 = 77;
const KEY_KPPLUS: u16 = 78;
const KEY_KP1: u16 = 79;
const KEY_KP2: u16 = 80;
const KEY_KP3: u16 = 81;
const KEY_KP0: u16 = 82;
const KEY_KPDOT: u16 = 83;

pub(crate) fn key_code_to_char(code: u16) -> io::Result<char> {
    Ok(match code {
        KEY_RESERVED => return Err(io::Error::new(io::ErrorKind::Other, "invalid key code")),
        KEY_ESC => return Err(io::Error::new(io::ErrorKind::Other, "invalid key code")),
        KEY_1 => '1',
        KEY_2 => '2',
        KEY_3 => '3',
        KEY_4 => '4',
        KEY_5 => '5',
        KEY_6 => '6',
        KEY_7 => '7',
        KEY_8 => '8',
        KEY_9 => '9',
        KEY_0 => '0',
        KEY_MINUS => '-',
        KEY_EQUAL => '=',
        KEY_BACKSPACE => return Err(io::Error::new(io::ErrorKind::Other, "invalid key code")),
        KEY_TAB => '\t',
        KEY_Q => 'Q',
        KEY_W => 'W',
        KEY_E => 'E',
        KEY_R => 'R',
        KEY_T => 'T',
        KEY_Y => 'Y',
        KEY_U => 'U',
        KEY_I => 'I',
        KEY_O => 'O',
        KEY_P => 'P',
        KEY_LEFTBRACE => '[',
        KEY_RIGHTBRACE => ']',
        KEY_ENTER => return Err(io::Error::new(io::ErrorKind::Other, "invalid key code")),
        KEY_LEFTCTRL => return Err(io::Error::new(io::ErrorKind::Other, "invalid key code")),
        KEY_A => 'A',
        KEY_S => 'S',
        KEY_D => 'D',
        KEY_F => 'F',
        KEY_G => 'G',
        KEY_H => 'H',
        KEY_J => 'J',
        KEY_K => 'K',
        KEY_L => 'L',
        KEY_SEMICOLON => ';',
        KEY_APOSTROPHE => '\'',
        //KEY_GRAVE => 'GRAVE',
        //KEY_LEFTSHIFT => 'LEFTSHIFT',
        //KEY_BACKSLASH => 'BACKSLASH',
        KEY_Z => 'Z',
        KEY_X => 'X',
        KEY_C => 'C',
        KEY_V => 'V',
        KEY_B => 'B',
        KEY_N => 'N',
        KEY_M => 'M',
        KEY_COMMA => ',',
        KEY_DOT => '.',
        KEY_SLASH => '/',
        //KEY_RIGHTSHIFT => 'RIGHTSHIFT',
        //KEY_KPASTERISK => 'KPASTERISK',
        //KEY_LEFTALT => 'LEFTALT',
        KEY_SPACE => ' ',
        //KEY_CAPSLOCK => 'CAPSLOCK',
        //KEY_F1 => 'F1',
        //KEY_F2 => 'F2',
        //KEY_F3 => 'F3',
        //KEY_F4 => 'F4',
        //KEY_F5 => 'F5',
        //KEY_F6 => 'F6',
        //KEY_F7 => 'F7',
        //KEY_F8 => 'F8',
        //KEY_F9 => 'F9',
        //KEY_F10 => 'F10',
        //KEY_NUMLOCK => 'NUMLOCK',
        //KEY_SCROLLLOCK => 'SCROLLLOCK',
        //KEY_KP7 => 'KP7',
        //KEY_KP8 => 'KP8',
        //KEY_KP9 => 'KP9',
        //KEY_KPMINUS => 'KPMINUS',
        //KEY_KP4 => 'KP4',
        //KEY_KP5 => 'KP5',
        //KEY_KP6 => 'KP6',
        //KEY_KPPLUS => 'KPPLUS',
        //KEY_KP1 => 'KP1',
        //KEY_KP2 => 'KP2',
        //KEY_KP3 => 'KP3',
        //KEY_KP0 => 'KP0',
        //KEY_KPDOT => 'KPDOT',
        k => {
            return Err(io::Error::new(
                io::ErrorKind::Other,
                format!("invalid key code: {k}"),
            ))
        }
    })
}
